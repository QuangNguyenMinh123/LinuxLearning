/* gpiod_get */
struct gpio_desc *gpiod_get(struct device *dev, const char *con_id, enum gpiod_flags flags);
dev: The device that will use the gpio_desc
con_id: array of char, use arbitrary string
flags: Optional flags to specify the direction and initial value for the GPIO. Possible values include:
        GPIOD_ASIS or 0: Do not initialize the GPIO.
        GPIOD_IN: Initialize the GPIO as input.
        GPIOD_OUT_LOW: Initialize the GPIO as output with a value of 0.
        GPIOD_OUT_HIGH: Initialize the GPIO as output with a value of 1.
/* gpiod_put */
void gpiod_put(struct gpio_desc *desc);
You should call gpiod_put when you no longer need the GPIO descriptor to ensure that resources are properly freed.
This is particularly important in kernel modules and drivers to avoid resource leaks
/* proc_create_data */
struct proc_dir_entry *proc_create_data(const char *name, umode_t mode, struct proc_dir_entry *parent,
 const struct file_operations *proc_fops, void *data);

The proc_create_data function in the Linux kernel is used to create an entry in the /proc filesystem.
This allows kernel modules or drivers to create files in /proc that can be used for communication between 
user space and kernel space.

name: The name of the file to be created in /proc.
mode: The permissions for the file (e.g., read/write , 0666).
parent: The parent directory under which the file will be created. If NULL, the file is created in the root of /proc.
proc_fops: A pointer to a file_operations structure that defines the operations that can be performed on the file.
            example : &file_ops
data: A pointer to private data that can be used by the file operations., this can be NULL

/* proc_remove */
void proc_remove(struct proc_dir_entry *de);
de: A pointer to the proc_dir_entry structure representing the entry to be removed. This value can be the value that 
returned from proc_create_data